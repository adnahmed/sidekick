
type ProofID int
type Lit int
type ExprID int

type Clause {
  lits: []Lit
}

# clause, RUP with previous steps
type Step_rup {
  res: Clause
  steps: []ProofID
}

# lit <-> expr
type Step_bridge_lit_expr {
  lit: Lit
  expr: ExprID
}

# prove congruence closure lemma `\/_{e\in eqns} e`
type Step_cc {
  eqns: []ExprID
}

# prove t=u using some previous steps and unit equations,
# and add clause (t=u) with given ID
type Step_preprocess {
  t: ExprID
  u: ExprID
  using: ProofID
}

type Step_view
  ( Step_rup
  | Step_bridge_lit_expr
  | Step_cc
  )

type Step {
  id: ProofID
  view: Step_view
}


